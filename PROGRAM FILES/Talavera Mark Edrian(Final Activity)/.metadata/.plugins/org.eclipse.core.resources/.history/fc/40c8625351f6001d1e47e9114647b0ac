package loginInvents;
import java.awt.*;
import java.awt.event.*;
import java.text.*;
import java.util.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.table.*;

@SuppressWarnings("serial")
public class Inventory extends JFrame{
	
//this will create a new Panel with BorderLayout------------{
	JPanel tblPanel = new JPanel(new BorderLayout());
	
//tableProperties--------------------------------------------------------------------------------------------------------------
	String [] column = new String [] {"Item Code","Item Name ","Item Description","Price","Size", "Stocks.","Re-Order Point" ,	"Remarks"};			
	String [][] row = new String [][] {
		{"00001", "Palmolive", "Shampoo","7.00", "10 ml","50","30","High Stock"},
		{"00002", "Creamsilk", "Shampoo","7.00", "10 ml","50","30","High Stock"},
		{"00003", "Sanicare", "Cleaning Wipes","50.00", "50 sheets","60","30","High Stock"},
		{"00004", "Datu Puti", "Soy Sauce","20.00", "200 ml","40","30","High Stock"},
		{"00005", "Colgate", "Toothbrush","20.00", "18 grams","50","30","High Stock"},
		{"00006", "Colgate", "Toothpaste","80.00", "150 grams","50","30","High Stock"},
		{"00007", "Joy", "Dishwashing Liquid","12.00", "18.5 ml","50","30","High Stock"},
		{"00008", "Century", "Canned Goods","78.2", "5.3 oz","50","30","High Stock"},
		{"00009", "Shyflakes", "Biscuit","55.6", "22 grams","50","30","High Stock"},
		{"00010", "Kopiko", "3 in 1","12.00", "7 grams","40","30","High Stock"},
		
	};
	 
	
//Parts Of Table---------------------------------------------------------------------------------------------------------------
	DefaultTableModel model = new DefaultTableModel(row, column);
	JTable table = new JTable(model);
	JScrollPane scroll = new JScrollPane(table);
	Vector <String> r = new Vector <String> ();	
//}
//labels-----------------------------------------------------------------------------------------------------------------------
	
	JLabel [] lblFields = new JLabel[7];
	String [] strLblFields = {"Item Code : ","Item Name :", "Item Description : ", "Price : ", "Size", "Stocks : ", "Re-Order Point : "};
	
//text box---------------------------------------------------------------------------------------------------------------------
	
	JTextField [] txtFields = new JTextField[7];
	DecimalFormat decfor = new DecimalFormat("00000");
	
	JLabel inventory =new JLabel();
	JLabel [] lblsearch = new JLabel[1];
	JTextField [] txtSearch = new JTextField[1];
//Buttons----------------------------------------------------------------------------------------------------------------------
	JButton [] buttons = new JButton[3];
	JButton [] button = new JButton[3];
	String [] btnlabels = {"Stock in","Add","Edit"};
	String [] btnlabel = {"Remove","Save","Cancel"};
	int num = 11;
	JButton save2 = new JButton();
	
	ImageIcon img = new ImageIcon(new ImageIcon("bgdash.jpg").getImage().getScaledInstance(1260, 740, Image.SCALE_SMOOTH));
	JLabel background = new JLabel("", img, JLabel.CENTER);
	
	ImageIcon img3 = new ImageIcon(new ImageIcon("left-arrow.png").getImage().getScaledInstance(30, 20, Image.SCALE_SMOOTH));
	JLabel back = new JLabel("", img3, JLabel.CENTER);

	ImageIcon img2 = new ImageIcon(new ImageIcon("close.png").getImage().getScaledInstance(20, 20, Image.SCALE_SMOOTH));
	JLabel close = new JLabel("", img2, JLabel.CENTER);

	void  Inventory(){	
//FrameProperties--------------------------------------------------------------------------------------------------------------
		inventory.setBounds(40,10,500,50);
		inventory.setText("Inventory");
		inventory.setForeground(Color.white);
		inventory.setFont(new Font("Cambria", Font.BOLD, 40));
		this.add(inventory);
		this.setUndecorated(true);
		this.setTitle("Inventory");
		this.setSize(1250, 470);
		this.setDefaultCloseOperation(EXIT_ON_CLOSE);
		this.setLocationRelativeTo(null);
		this.getContentPane().setBackground(Color.decode("#205072"));
		this.setResizable(false);
		 background.setBounds(0, 0, 1250, 740);
		

		back.setBounds(5,2,30,20);
		back.setFont(new Font("Cambria", Font.BOLD, 16));
		back.setForeground(Color.RED);
		
		back.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {          
            	  int result = JOptionPane.showConfirmDialog(null, "Back to DashBoard?","CONFIRM", JOptionPane.YES_NO_OPTION);
                  if (result == JOptionPane.YES_OPTION) {  
                	  Dashboard sub =new Dashboard();
  		            sub.Dashboard();
  		            dispose();
                  }	              	    
            }
        });
        
    	close.setBounds(1220,5,20,20);
		close.setFont(new Font("Cambria", Font.BOLD, 16));
		close.setForeground(Color.RED);
		close.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {          
            	  int result = JOptionPane.showConfirmDialog(null, "<html>Are you sure you want to <br> close this program? </html>", "CONFIRM", JOptionPane.YES_NO_OPTION);
                  if (result == JOptionPane.YES_OPTION) {  
                      Component component = (Component) e.getSource();
                      Window window = SwingUtilities.getWindowAncestor(component);
                      window.dispose();
                  }	              	    
            }
        });
		
	    	
//This loop will set the properties of JTextField , JLabel -------------------------------------------------------------------
		int y =80;
		for(int i = 0; i <= lblFields.length-1 ; i++) {
//properties of JTextField ---------------------------------------------------------------------------------------------------
			txtFields[i] = new JTextField();
			txtFields[i].setBounds(160, y, 150, 25);
			this.add(txtFields[i]);
			txtFields[i].setForeground(Color.BLACK);
			txtFields[i].setFont(new Font("Cambria", Font.BOLD, 12));
			txtFields[i].setEditable(false);
//properties of JLabel--------------------------------------------------------------------------------------------------------
			lblFields[i] = new JLabel();
			lblFields[i].setText(strLblFields[i]);
			lblFields[i].setForeground(Color.white);
			lblFields[i].setFont(new Font("Cambria", Font.BOLD, 12));
			lblFields[i].setBounds(50, y, 150, 25);
			this.add(lblFields[i]);
			y += 40;
		}
//Table-----------------------------------------------------------------------------------------------------------------------	
		table.getTableHeader().setEnabled(false);
		DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
		centerRenderer.setHorizontalAlignment(JLabel.CENTER);

		for(int i = 0; i < column.length; i++) {
			table.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
		}		
		TableColumnModel tmtblProducts = table.getColumnModel();
		tmtblProducts.getColumn(0).setPreferredWidth(150);
		tmtblProducts.getColumn(1).setPreferredWidth(190);
		tmtblProducts.getColumn(2).setPreferredWidth(190);
		tmtblProducts.getColumn(3).setPreferredWidth(100);
		tmtblProducts.getColumn(4).setPreferredWidth(100);
		tmtblProducts.getColumn(5).setPreferredWidth(110);
		tmtblProducts.getColumn(6).setPreferredWidth(150);
		tmtblProducts.getColumn(7).setPreferredWidth(190);
		table.setDefaultEditor(Object.class, null);		
		table.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
			@Override
			public void valueChanged(ListSelectionEvent e) {
				// TODO Auto-generated method stub
			int rows = table.getSelectedRow();
			if(rows == -1){				
			}
			else{
				for(int i =0; i<=txtFields.length-1; i++){
					txtFields[i].setText((String) table.getValueAt(rows,i));				
				}
			}							
		}	
		});
		
//panel------------------------------------------------------------------------------------------------------------------------		
		tblPanel.setBounds(350, 80, 870, 370);
		tblPanel.setBackground(Color.white);
		tblPanel.add(scroll);

//Buttons----------------------------------------------------------------------------------------------------------------------
		int x=50;
		for(int i = 0; i <= buttons.length-1 ; i++) {
			buttons[i] = new JButton();
			buttons[i].setText(btnlabels[i]);
			buttons[i].setBounds( x,380, 80, 30);
			buttons[i].setFocusable(false);
			this.add(buttons[i]);
			//y += 30;
			x +=90;
		}
		int z=50;
		for(int i = 0; i <= button.length-1 ; i++) {			
			button[i] = new JButton();
			button[i].setText(btnlabel[i]);
			button[i].setBounds( z,420, 80, 30);
			button[i].setFocusable(false);
			this.add(button[i]);
			//y += 30;
			z +=90;
		}
		button[1].setEnabled(false);
		button[2].setEnabled(false);
		
//Stock in Process ------------------------------------------------------------------------------------------------------------------		
		buttons[0].addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				int selected = table.getSelectedRow();
			if(selected == -1){
				JOptionPane.showMessageDialog(null, "Select row and try again.", "No row selected", JOptionPane.WARNING_MESSAGE);
			}
			else{
				try{
					String fours = table.getValueAt(selected,5).toString();
					String fives = JOptionPane.showInputDialog("Enter Stocks:");
					
					int intfours = Integer.parseInt(fours);
					int intfives = Integer.parseInt(fives);
					int inttotal = intfives + intfours;

					JOptionPane.showMessageDialog(null, "Stocks Added");
					model.setValueAt(String.valueOf(inttotal), selected,5);
					String val = table.getValueAt(selected,6).toString();
					
					if(intfives>Integer.parseInt(val)){
						model.setValueAt("High Stock", selected,7);
					}
					else if(intfives == Integer.parseInt(val)){
						model.setValueAt("Low Stock", selected,7);
					}
					else if(intfives<Integer.parseInt(val)){
						model.setValueAt("Low Stock", selected,7);
					}

					for(int a=0; a<=txtFields.length-1; a++){
						txtFields[a].setText("");				
					}

					table.getSelectionModel().clearSelection();

					}
				catch(Exception ems){
					JOptionPane.showMessageDialog(null, "Enter number on stocks. Please try again", "Input Error", JOptionPane.WARNING_MESSAGE);
					table.getSelectionModel().clearSelection();
					for(int i=0; i<=txtFields.length-1; i++){
						txtFields[i].setText("");				
					}
					}
					}
					}
		});		
//add Process ------------------------------------------------------------------------------------------------------------------		
		buttons[1].addActionListener(new ActionListener() {
			
			@Override
				public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				r = new Vector<String>();
				if (e.getSource()==buttons[1]) {						
				txtFields[0].setText(decfor.format(num));	
				num ++;
				}				 									
				if(e.getSource()==buttons[1]) {
					buttons[0].setEnabled(false);
					buttons[1].setEnabled(false);
					buttons[2].setEnabled(false);
					
					button[0].setEnabled(false);
					button[1].setEnabled(true);
					button[2].setEnabled(true);				
				}								
				if(e.getSource()==buttons[1]) {
						txtFields[1].setText("");						
						txtFields[2].setText("");
						txtFields[3].setText("");
						txtFields[4].setText("");
						txtFields[5].setText("");
						txtFields[6].setText("");
						
						txtFields[1].setEditable(true);
						txtFields[2].setEditable(true);
						txtFields[3].setEditable(true);
						txtFields[4].setEditable(true);
						txtFields[5].setEditable(true);
						txtFields[6].setEditable(true);
				}	
				}			
			});		
//edit Process ------------------------------------------------------------------------------------------------------------------		
			buttons[2].addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					// TODO Auto-generated method stub					
					if(e.getSource()==buttons[2]) {
						buttons[0].setEnabled(false);
						buttons[1].setEnabled(false);
						buttons[2].setEnabled(false);
						button[0].setEnabled(false);
						button[1].setEnabled(true);
						button[2].setEnabled(true);
					}				
				if(e.getSource() == buttons[2]){
						if(table.getSelectedRow() == -1){
							JOptionPane.showMessageDialog(null,"Select row to edit.");
						buttons[0].setEnabled(true);
						buttons[1].setEnabled(true);
						buttons[2].setEnabled(true);
					
						button[0].setEnabled(true);
						button[1].setEnabled(false);
						button[2].setEnabled(false);
						}
						else{
							for(int a=0; a<=txtFields.length-1;a++){
								txtFields[a].setEditable(true);
							}
							txtFields[5].setEditable(false);
							save2.setVisible(true);
							button[1].setVisible(false);													
							buttons[0].setEnabled(false);
							buttons[1].setEnabled(false);
							buttons[2].setEnabled(false);
							button[0].setEnabled(false);
							button[1].setEnabled(false);
							button[2].setEnabled(true);
						}
						}
				}});			
			save2.setBounds(140, 420, 80, 30);
			save2.setText("Save");
			save2.setFocusable(false);
			save2.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					// TODO Auto-generated method stub
				try{

				 if(txtFields[0].getText().isBlank() || txtFields[1].getText().isBlank() || txtFields[2].getText().isBlank() || txtFields[3].getText().isBlank() || txtFields[4].getText().isBlank() || txtFields[5].getText().isBlank()){
		    		JOptionPane.showMessageDialog(null,"Fill up the fields correctly.");		    	
		    		}
		    	else{
				int rows = table.getSelectedRow();
				int fours = Integer.parseInt(txtFields[5].getText());
				int fives = Integer.parseInt(txtFields[6].getText());

				for(int i=0; i<= 3; i++){

					model.setValueAt(txtFields[i].getText(), rows, i);
				}

				model.setValueAt(String.valueOf(fours), rows, 5);
				model.setValueAt(String.valueOf(fives), rows, 6);

					if(fours<fives){
						model.setValueAt("Low Stock", rows,7);
					}

					else if(fours>fives){
						model.setValueAt("High Stock", rows,7);
					}

					JOptionPane.showMessageDialog(null,"Row Edited.");
					table.getSelectionModel().clearSelection();

					button[1].setEnabled(false);
					button[2].setEnabled(false);
					buttons[1].setEnabled(true);
				    buttons[0].setEnabled(true);
				    button[0].setEnabled(true);
				    buttons[2].setEnabled(true);

				    save2.setVisible(false);
				    button[1].setVisible(true);
					

					for(int i=0; i<=txtFields.length-1; i++){
					txtFields[i].setText("");
					txtFields[i].setEditable(false);
					}
				}
			}
			catch(Exception v){
				JOptionPane.showMessageDialog(null,"Enter number on stocks and re-order point.", "Invalid Input", JOptionPane.ERROR_MESSAGE);					
					}					
				}
			});
//remove Process ------------------------------------------------------------------------------------------------------------------				
			button[0].addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					// TODO Auto-generated method stub	
					int i = table.getSelectedRow();

					if(e.getSource()==button[0]) {
						if(!table.isRowSelected(i)) {
							JOptionPane.showMessageDialog(null,"Select Row First", "Invalid Input", JOptionPane.ERROR_MESSAGE);					
						}else {
						int cancels =JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this item?","Delete",JOptionPane.YES_NO_OPTION);
						if(cancels ==JOptionPane.YES_OPTION) {
							JOptionPane.showMessageDialog(null,"Item Successfully Deleted");									                    
			                     
			                     if(table.isRowSelected(i)) {										
										model.removeRow(table.getSelectedRow());										
							}
			              }
					}
					}
				}				
			});
//Save Process ------------------------------------------------------------------------------------------------------------------		
			button[1].addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					// TODO Auto-generated method stub					
			if(txtFields[0].getText().isBlank() || txtFields[1].getText().isBlank() || txtFields[2].getText().isBlank() || txtFields[3].getText().isBlank() || txtFields[4].getText().isBlank() || txtFields[5].getText().isBlank()|| txtFields[6].getText().isBlank()){
		    	JOptionPane.showMessageDialog(null,"Invalid/Empty inputs. Please try again.");		    	
		    }

			 else if(txtFields[0].getText().equals("") || txtFields[1].getText().equals("") || txtFields[2].getText().equals("") || txtFields[3].getText().equals("") || txtFields[4].getText().equals("") || txtFields[5].getText().equals("")|| txtFields[6].getText().equals("")){
		    	JOptionPane.showMessageDialog(null,"Invalid/Empty inputs. Please try again.");		    	
		    }


			 else if(txtFields[0].getText().isEmpty() || txtFields[1].getText().isEmpty() || txtFields[2].getText().isEmpty() || txtFields[3].getText().isEmpty() || txtFields[4].getText().isEmpty() || txtFields[5].getText().isEmpty()|| txtFields[6].getText().isEmpty()){
		    	JOptionPane.showMessageDialog(null,"Invalid/Empty inputs. Please try again.");		    	
		    }	
			 else if(txtFields[1].getText().matches(".*([0-9]).*")){
			    	JOptionPane.showMessageDialog(null,"Item Names  can't contain numbers!");		    	
			    }
			 else if(txtFields[2].getText().matches(".*([0-9]).*")){
			    	JOptionPane.showMessageDialog(null,"Item description  can't contain numbers!");		    	
			    }		 
		    else{
				try{
					int int1 = Integer.parseInt(txtFields[4].getText());
					int int2 = Integer.parseInt(txtFields[5].getText());

					for(int cc=0; cc<=4; cc++){
					r.add(txtFields[cc].getText());
					}
				r.add(String.valueOf(int1));
				r.add(String.valueOf(int2));


				int dialog = JOptionPane.showConfirmDialog(null, "Do you want to save the row?", "Saving", JOptionPane.YES_NO_OPTION);
				 
				if(dialog == 0){

					if(int1<int2){
						r.add("Low Stock");
					}

					else if(int1==int2){
						r.add("Low Stock");
					}

					else if(int1>int2){
						r.add("High Stock");
					}
					model.addRow(r);					
					JOptionPane.showMessageDialog(null,"Row Added");
					table.getSelectionModel().clearSelection();
					for(int a=0; a<=txtFields.length-1; a++){
						txtFields[a].setText("");
						txtFields[a].setEditable(false);
					}
					button[0].setEnabled(true);
					button[1].setEnabled(false);
					button[2].setEnabled(false);
					
					buttons[1].setEnabled(true);
				    buttons[0].setEnabled(true);
				    buttons[2].setEnabled(true);						 			
					}

					}
				catch(Exception m){
					JOptionPane.showMessageDialog(null,"Please enter number on stocks and re-order point.", "Unsupported Input", JOptionPane.WARNING_MESSAGE);					
					}
		    		}			
					}				
			});	
			
			button[2].addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent e) {
					// TODO Auto-generated method stub
					if(e.getSource()==button[2])	{
						int cancels =JOptionPane.showConfirmDialog(null, "Are you sure you want to delete all the data?","Cancel",JOptionPane.YES_NO_OPTION);
						if(cancels ==0) {
							JOptionPane.showMessageDialog(null,"this will remove all the data you input");	
							
							txtFields[0].setText("");
							txtFields[1].setText("");
							txtFields[2].setText("");
							txtFields[3].setText("");
							txtFields[4].setText("");
							txtFields[5].setText("");
							txtFields[6].setText("");
							
						buttons[0].setEnabled(true);
						buttons[1].setEnabled(true);
						buttons[2].setEnabled(true);
						button[0].setEnabled(true);
						button[1].setEnabled(false);
						button[2].setEnabled(false);
						save2.setVisible(false);
						button[1].setVisible(true);							
						}
						}					
						}				
			});						
			//this will add a function to filter the items in a table							
			for(int i = 0; i <= lblsearch.length-1; i++) {
				txtSearch[i] = new JTextField();
				txtSearch[i].setBounds(530,30,500,30);
				txtSearch[i].setForeground(Color.BLACK);
				txtSearch[i].setFont(new Font("Cambria", Font.BOLD, 15));
				this.add(txtSearch[i]);
				
				lblsearch[i] = new JLabel();
				lblsearch[i].setText("Search");
				lblsearch[i].setForeground(Color.white);
				lblsearch[i].setFont(new Font("Cambria", Font.BOLD, 40));
				lblsearch[i].setBounds(390, 20, 150, 50);
				this.add(lblsearch[i]);	
			}						
			TableRowSorter<TableModel> sort = new TableRowSorter<>(table.getModel());
			table.setRowSorter(sort);
			txtSearch[0].getDocument().addDocumentListener(new DocumentListener()
					    {
					            @Override
					            public void insertUpdate(DocumentEvent e) {
					                String str = txtSearch[0].getText();
					                if (str.trim().length() == 0) {
					                    sort.setRowFilter(null);
					                } else {
					                    //(?i) means case insensitive search
					                    sort.setRowFilter(RowFilter.regexFilter("(?i)" + str));
					                }
					            }
					            @Override
					            public void removeUpdate(DocumentEvent e) {
					                String str = txtSearch[0].getText();
					                if (str.trim().length() == 0) {
					                    sort.setRowFilter(null);
					                } else {
					                    sort.setRowFilter(RowFilter.regexFilter("(?i)" + str));
					                }
					            }
					            @Override
					            public void changedUpdate(DocumentEvent e) {}
					        });		
//add to frame------------------------------------------------------------------------------------------------------------------		
		this.add(back);
		this.add(close);
		this.add(tblPanel);
		this.add(save2);
		this.add(background);
		this.setLayout(null);
		this.setVisible(true);			
	}
}
