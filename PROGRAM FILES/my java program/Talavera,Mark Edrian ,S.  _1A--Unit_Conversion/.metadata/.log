!SESSION 2023-02-26 10:45:57.043 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.5
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

This is a continuation of log file C:\Users\marke\Desktop\Talavera,Mark Edrian ,S.  _1A--Unit_Conversion\.metadata\.bak_0.log
Created Time: 2023-02-26 13:11:25.503

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:11:25.504
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:11:25.506
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:11:27.010
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = *0.0625;(inputValue 9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:11:27.012
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:11:27.014
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:11:27.852
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = *0.0625;(inputValue9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-02-26 13:11:27.854
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-02-26 13:11:27.856
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:11:27.954
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = *0.0625;(inputValue9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:11:27.975
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:11:27.977
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:11:28.790
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = *0.0625;(inputValue*9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-02-26 13:11:28.793
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-02-26 13:11:28.794
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:11:29.082
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = *0.0625;(inputValue*9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:11:29.084
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:11:29.086
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:11:33.430
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = *0.0625;(inputValue*9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:11:33.434
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:11:33.438
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:11:34.849
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = *0.0625;(inputValue*9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:11:34.852
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:11:34.853
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:21:41.486
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Celsius
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = (inputValue*9/5) + 32 ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue + 273.15;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }
				 //Fahrenheit
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Fahrenheit")) {
						  if (outputUnit.equals("Fahrenheit")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Celsius")) {
			                   outputValue = (inputValue - 32) * 5/9 ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = (inputValue-32) * 5/9 + 273.15;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }
				//Kelvin
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Kelvin")) {
						  if (outputUnit.equals("Kelvin")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Celsius")) {
			                   outputValue = inputValue - 273.15  ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = (inputValue-273.15) × 9/5 + 32;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }

				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-02-26 13:21:41.489
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-02-26 13:21:41.490
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:21:41.681
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Celsius
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = (inputValue*9/5) + 32 ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue + 273.15;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }
				 //Fahrenheit
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Fahrenheit")) {
						  if (outputUnit.equals("Fahrenheit")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Celsius")) {
			                   outputValue = (inputValue - 32) * 5/9 ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = (inputValue-32) * 5/9 + 273.15;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }
				//Kelvin
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Kelvin")) {
						  if (outputUnit.equals("Kelvin")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Celsius")) {
			                   outputValue = inputValue - 273.15  ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = (inputValue-273.15) × 9/5 + 32;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }

				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:21:41.683
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:21:41.685
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:21:43.479
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Celsius
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = (inputValue*9/5) + 32 ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue + 273.15;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }
				 //Fahrenheit
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Fahrenheit")) {
						  if (outputUnit.equals("Fahrenheit")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Celsius")) {
			                   outputValue = (inputValue - 32) * 5/9 ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = (inputValue-32) * 5/9 + 273.15;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }
				//Kelvin
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Kelvin")) {
						  if (outputUnit.equals("Kelvin")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Celsius")) {
			                   outputValue = inputValue - 273.15  ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = (inputValue- 273.15) × 9/5 + 32;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }

				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-02-26 13:21:43.481
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-02-26 13:21:43.488
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:21:43.548
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Celsius
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = (inputValue*9/5) + 32 ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue + 273.15;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }
				 //Fahrenheit
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Fahrenheit")) {
						  if (outputUnit.equals("Fahrenheit")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Celsius")) {
			                   outputValue = (inputValue - 32) * 5/9 ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = (inputValue-32) * 5/9 + 273.15;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }
				//Kelvin
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Kelvin")) {
						  if (outputUnit.equals("Kelvin")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Celsius")) {
			                   outputValue = inputValue - 273.15  ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = (inputValue- 273.15) × 9/5 + 32;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }

				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:21:43.573
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:21:43.575
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:21:44.121
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Celsius
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = (inputValue*9/5) + 32 ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue + 273.15;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }
				 //Fahrenheit
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Fahrenheit")) {
						  if (outputUnit.equals("Fahrenheit")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Celsius")) {
			                   outputValue = (inputValue - 32) * 5/9 ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = (inputValue-32) * 5/9 + 273.15;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }
				//Kelvin
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Kelvin")) {
						  if (outputUnit.equals("Kelvin")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Celsius")) {
			                   outputValue = inputValue - 273.15  ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = (inputValue- 273.15) × 9/5 + 32;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }

				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:21:44.123
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:21:44.125
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:21:46.048
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Celsius
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = (inputValue*9/5) + 32 ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue + 273.15;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }
				 //Fahrenheit
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Fahrenheit")) {
						  if (outputUnit.equals("Fahrenheit")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Celsius")) {
			                   outputValue = (inputValue - 32) * 5/9 ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = (inputValue-32) * 5/9 + 273.15;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }
				//Kelvin
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Kelvin")) {
						  if (outputUnit.equals("Kelvin")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Celsius")) {
			                   outputValue = inputValue - 273.15  ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = (inputValue- 273.15) × 9/5 + 32;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }

				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:21:46.050
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:21:46.052
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:21:46.834
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Celsius
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = (inputValue*9/5) + 32 ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue + 273.15;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }
				 //Fahrenheit
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Fahrenheit")) {
						  if (outputUnit.equals("Fahrenheit")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Celsius")) {
			                   outputValue = (inputValue - 32) * 5/9 ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = (inputValue-32) * 5/9 + 273.15;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }
				//Kelvin
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Kelvin")) {
						  if (outputUnit.equals("Kelvin")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Celsius")) {
			                   outputValue = inputValue - 273.15  ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = (inputValue- 273.15) × 9/5 + 32;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }

				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:21:46.837
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:21:46.841
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:21:46.926
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Celsius
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = (inputValue*9/5) + 32 ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue + 273.15;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }
				 //Fahrenheit
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Fahrenheit")) {
						  if (outputUnit.equals("Fahrenheit")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Celsius")) {
			                   outputValue = (inputValue - 32) * 5/9 ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = (inputValue-32) * 5/9 + 273.15;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }
				//Kelvin
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Kelvin")) {
						  if (outputUnit.equals("Kelvin")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Celsius")) {
			                   outputValue = inputValue - 273.15  ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = (inputValue- 273.15) × 9/5 + 32;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }

				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:21:46.928
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:21:46.930
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:21:47.604
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Celsius
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = (inputValue*9/5) + 32 ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue + 273.15;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }
				 //Fahrenheit
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Fahrenheit")) {
						  if (outputUnit.equals("Fahrenheit")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Celsius")) {
			                   outputValue = (inputValue - 32) * 5/9 ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = (inputValue-32) * 5/9 + 273.15;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }
				//Kelvin
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Kelvin")) {
						  if (outputUnit.equals("Kelvin")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Celsius")) {
			                   outputValue = inputValue - 273.15  ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = (inputValue- 273.15) × 9/5 + 32;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }

				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:21:47.607
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:21:47.608
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:21:49.029
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Celsius
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = (inputValue*9/5) + 32 ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue + 273.15;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }
				 //Fahrenheit
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Fahrenheit")) {
						  if (outputUnit.equals("Fahrenheit")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Celsius")) {
			                   outputValue = (inputValue - 32) * 5/9 ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = (inputValue-32) * 5/9 + 273.15;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }
				//Kelvin
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Kelvin")) {
						  if (outputUnit.equals("Kelvin")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Celsius")) {
			                   outputValue = inputValue - 273.15  ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = (inputValue - 273.15) × 9/5 + 32;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }

				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-02-26 13:21:49.033
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-02-26 13:21:49.035
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:21:49.279
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Celsius
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = (inputValue*9/5) + 32 ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue + 273.15;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }
				 //Fahrenheit
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Fahrenheit")) {
						  if (outputUnit.equals("Fahrenheit")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Celsius")) {
			                   outputValue = (inputValue - 32) * 5/9 ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = (inputValue-32) * 5/9 + 273.15;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }
				//Kelvin
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Kelvin")) {
						  if (outputUnit.equals("Kelvin")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Celsius")) {
			                   outputValue = inputValue - 273.15  ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = (inputValue - 273.15) × 9/5 + 32;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }

				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:21:49.283
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:21:49.285
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:21:52.351
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Celsius
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = (inputValue*9/5) + 32 ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue + 273.15;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }
				 //Fahrenheit
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Fahrenheit")) {
						  if (outputUnit.equals("Fahrenheit")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Celsius")) {
			                   outputValue = (inputValue - 32) * 5/9 ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = (inputValue-32) * 5/9 + 273.15;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }
				//Kelvin
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Kelvin")) {
						  if (outputUnit.equals("Kelvin")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Celsius")) {
			                   outputValue = inputValue - 273.15  ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = (inputValue - 273.15) × 9/5 + 32;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }

				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-02-26 13:21:52.354
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-02-26 13:21:52.356
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:21:52.421
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Celsius
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = (inputValue*9/5) + 32 ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue + 273.15;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }
				 //Fahrenheit
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Fahrenheit")) {
						  if (outputUnit.equals("Fahrenheit")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Celsius")) {
			                   outputValue = (inputValue - 32) * 5/9 ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = (inputValue-32) * 5/9 + 273.15;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }
				//Kelvin
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Kelvin")) {
						  if (outputUnit.equals("Kelvin")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Celsius")) {
			                   outputValue = inputValue - 273.15  ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = (inputValue - 273.15) × 9/5 + 32;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }

				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:257)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:21:52.423
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:257)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:21:52.425
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:257)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:21:56.849
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Celsius
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = (inputValue*9/5) + 32 ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue + 273.15;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }
				 //Fahrenheit
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Fahrenheit")) {
						  if (outputUnit.equals("Fahrenheit")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Celsius")) {
			                   outputValue = (inputValue - 32) * 5/9 ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = (inputValue-32) * 5/9 + 273.15;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }
				//Kelvin
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Kelvin")) {
						  if (outputUnit.equals("Kelvin")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Celsius")) {
			                   outputValue = inputValue - 273.15  ;

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = (inputValue - 273.15) × 9/5 + 32;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				  }	 
					 
				 }

				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:21:56.852
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:21:56.853
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:37:32.460
!MESSAGE Could not retrieve declared fields
!STACK 0
org.eclipse.core.runtime.OperationCanceledException
	at org.eclipse.jdt.internal.core.AbstractClassFile.getClassFileContent(AbstractClassFile.java:237)
	at org.eclipse.jdt.internal.core.ClassFile.getJarBinaryTypeInfo(ClassFile.java:240)
	at org.eclipse.jdt.internal.core.ClassFile.existsUsingJarTypeCache(ClassFile.java:162)
	at org.eclipse.jdt.internal.core.NameLookup.seekTypesInBinaryPackage(NameLookup.java:1482)
	at org.eclipse.jdt.internal.core.NameLookup.seekTypes(NameLookup.java:1450)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:996)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:823)
	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:742)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:176)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:530)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.fromSplitPackageOrOracle(LookupEnvironment.java:427)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$1(LookupEnvironment.java:300)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:299)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getType(PackageBinding.java:195)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isViewedAsDeprecated(PackageBinding.java:314)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isViewedAsDeprecated(ReferenceBinding.java:1773)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:615)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding.resolve(UnresolvedReferenceBinding.java:116)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType(BinaryTypeBinding.java:249)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.getMemberType(BinaryTypeBinding.java:1542)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getTypeFromTypeSignature(LookupEnvironment.java:2055)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.createFields(BinaryTypeBinding.java:866)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.cachePartsFrom(BinaryTypeBinding.java:613)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1058)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:1039)
	at org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:308)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:260)
	at org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding.resolve(UnresolvedReferenceBinding.java:116)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType(BinaryTypeBinding.java:249)
	at org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding.resolve(ParameterizedTypeBinding.java:1242)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType(BinaryTypeBinding.java:220)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveTypeFor(BinaryTypeBinding.java:1893)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.availableFields(BinaryTypeBinding.java:373)
	at org.eclipse.jdt.core.dom.TypeBinding.getDeclaredFields(TypeBinding.java:249)
	at org.eclipse.jdt.internal.ui.text.correction.UnresolvedElementsSubProcessor.hasMethodWithName(UnresolvedElementsSubProcessor.java:578)
	at org.eclipse.jdt.internal.ui.text.correction.UnresolvedElementsSubProcessor.hasMethodWithName(UnresolvedElementsSubProcessor.java:585)
	at org.eclipse.jdt.internal.ui.text.correction.UnresolvedElementsSubProcessor.addSimilarVariableProposals(UnresolvedElementsSubProcessor.java:528)
	at org.eclipse.jdt.internal.ui.text.correction.UnresolvedElementsSubProcessor.getVariableProposals(UnresolvedElementsSubProcessor.java:315)
	at org.eclipse.jdt.internal.ui.text.correction.QuickFixProcessor.process(QuickFixProcessor.java:406)
	at org.eclipse.jdt.internal.ui.text.correction.QuickFixProcessor.getCorrections(QuickFixProcessor.java:361)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionCollector.safeRun(JavaCorrectionProcessor.java:381)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionProcessorAccess.run(JavaCorrectionProcessor.java:341)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionProcessorAccess.process(JavaCorrectionProcessor.java:336)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor.collectCorrections(JavaCorrectionProcessor.java:465)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:115)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)
!SESSION 2023-02-26 13:54:35.921 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.5
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-02-26 13:54:41.722
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-02-26 13:58:19.880
!MESSAGE Logback config file: C:\Users\marke\Desktop\Talavera,Mark Edrian ,S.  _1A--Unit_Conversion\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-02-26 13:58:33.306
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-02-26 13:58:33.307
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-02-26 13:58:33.307
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-02-26 13:58:53.452
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\marke'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.ui 4 10001 2023-02-26 18:44:43.273
!MESSAGE Internal Error
!STACK 0
org.eclipse.jface.text.BadLocationException
	at org.eclipse.jface.text.AbstractDocument.addPosition(AbstractDocument.java:350)
	at org.eclipse.core.internal.filebuffers.SynchronizableDocument.addPosition(SynchronizableDocument.java:212)
	at org.eclipse.jdt.internal.ui.javaeditor.SemanticHighlightingPresenter.updatePresentation(SemanticHighlightingPresenter.java:214)
	at org.eclipse.jdt.internal.ui.javaeditor.SemanticHighlightingPresenter.lambda$0(SemanticHighlightingPresenter.java:149)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:132)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4029)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3645)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
!SESSION 2023-02-26 21:36:27.204 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.5
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-02-26 21:36:33.672
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-02-26 21:37:06.127
!MESSAGE Logback config file: C:\Users\marke\Desktop\Talavera,Mark Edrian ,S.  _1A--Unit_Conversion\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-02-26 21:37:18.548
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-02-26 21:37:18.549
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-02-26 21:37:18.549
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-02-26 21:37:42.328
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\marke'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-03-04 08:39:55.141 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.5
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-03-04 08:39:58.616
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-03-04 08:40:37.835
!MESSAGE Logback config file: C:\Users\marke\Desktop\Talavera,Mark Edrian ,S.  _1A--Unit_Conversion\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-03-04 08:40:50.504
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-03-04 08:40:50.504
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-03-04 08:40:50.504
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-03-04 08:41:28.770
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\marke'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-03-04 19:24:54.285 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.5
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-03-04 19:24:57.776
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-03-04 19:25:09.056
!MESSAGE Logback config file: C:\Users\marke\Desktop\Talavera,Mark Edrian ,S.  _1A--Unit_Conversion\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-03-04 19:25:25.306
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-03-04 19:25:25.306
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-03-04 19:25:25.307
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-03-04 19:26:21.332
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\marke'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-08 22:27:21.986 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.6
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.core.resources 4 567 2023-05-08 22:28:01.515
!MESSAGE Workspace restored, but some problems occurred.
!SUBENTRY 1 org.eclipse.core.resources 4 567 2023-05-08 22:28:01.515
!MESSAGE Could not read metadata for '.org.eclipse.egit.core.cmp'.
!STACK 1
org.eclipse.core.internal.resources.ResourceException(/.org.eclipse.egit.core.cmp)[567]: java.lang.Exception: The project description file (.project) for '.org.eclipse.egit.core.cmp' is missing.  This file contains important information about the project.  The project will not function properly until this file is restored.
	at org.eclipse.core.internal.resources.ResourceException.provideStackTrace(ResourceException.java:42)
	at org.eclipse.core.internal.resources.ResourceException.<init>(ResourceException.java:38)
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.read(FileSystemResourceManager.java:908)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:895)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:875)
	at org.eclipse.core.internal.resources.SaveManager.restore(SaveManager.java:731)
	at org.eclipse.core.internal.resources.SaveManager.startup(SaveManager.java:1587)
	at org.eclipse.core.internal.resources.Workspace.startup(Workspace.java:2547)
	at org.eclipse.core.internal.resources.Workspace.open(Workspace.java:2252)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:571)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:1)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:943)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:1)
	at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
	at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:321)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:264)
	at org.eclipse.core.resources.ResourcesPlugin.start(ResourcesPlugin.java:545)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:818)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:1)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:569)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.startActivator(BundleContextImpl.java:810)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.start(BundleContextImpl.java:767)
	at org.eclipse.osgi.internal.framework.EquinoxBundle.startWorker0(EquinoxBundle.java:1032)
	at org.eclipse.osgi.internal.framework.EquinoxBundle$EquinoxModule.startWorker(EquinoxBundle.java:371)
	at org.eclipse.osgi.container.Module.doStart(Module.java:605)
	at org.eclipse.osgi.container.Module.start(Module.java:468)
	at org.eclipse.osgi.framework.util.SecureAction.start(SecureAction.java:513)
	at org.eclipse.osgi.internal.hooks.EclipseLazyStarter.postFindLocalClass(EclipseLazyStarter.java:117)
	at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findLocalClass(ClasspathManager.java:570)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.findLocalClass(ModuleClassLoader.java:335)
	at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:397)
	at org.eclipse.osgi.internal.loader.sources.SingleSourcePackage.loadClass(SingleSourcePackage.java:41)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass0(BundleLoader.java:496)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:416)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:168)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:153)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
!SUBENTRY 2 org.eclipse.core.resources 4 567 2023-05-08 22:28:01.517
!MESSAGE The project description file (.project) for '.org.eclipse.egit.core.cmp' is missing.  This file contains important information about the project.  The project will not function properly until this file is restored.
!STACK 0
java.lang.Exception: The project description file (.project) for '.org.eclipse.egit.core.cmp' is missing.  This file contains important information about the project.  The project will not function properly until this file is restored.
	at org.eclipse.core.internal.resources.ResourceException.provideStackTrace(ResourceException.java:42)
	at org.eclipse.core.internal.resources.ResourceException.<init>(ResourceException.java:38)
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.read(FileSystemResourceManager.java:908)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:895)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:875)
	at org.eclipse.core.internal.resources.SaveManager.restore(SaveManager.java:731)
	at org.eclipse.core.internal.resources.SaveManager.startup(SaveManager.java:1587)
	at org.eclipse.core.internal.resources.Workspace.startup(Workspace.java:2547)
	at org.eclipse.core.internal.resources.Workspace.open(Workspace.java:2252)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:571)
	at org.eclipse.core.resources.ResourcesPlugin$WorkspaceInitCustomizer.addingService(ResourcesPlugin.java:1)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:943)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:1)
	at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
	at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:321)
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:264)
	at org.eclipse.core.resources.ResourcesPlugin.start(ResourcesPlugin.java:545)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:818)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$2.run(BundleContextImpl.java:1)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:569)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.startActivator(BundleContextImpl.java:810)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.start(BundleContextImpl.java:767)
	at org.eclipse.osgi.internal.framework.EquinoxBundle.startWorker0(EquinoxBundle.java:1032)
	at org.eclipse.osgi.internal.framework.EquinoxBundle$EquinoxModule.startWorker(EquinoxBundle.java:371)
	at org.eclipse.osgi.container.Module.doStart(Module.java:605)
	at org.eclipse.osgi.container.Module.start(Module.java:468)
	at org.eclipse.osgi.framework.util.SecureAction.start(SecureAction.java:513)
	at org.eclipse.osgi.internal.hooks.EclipseLazyStarter.postFindLocalClass(EclipseLazyStarter.java:117)
	at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findLocalClass(ClasspathManager.java:570)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.findLocalClass(ModuleClassLoader.java:335)
	at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:397)
	at org.eclipse.osgi.internal.loader.sources.SingleSourcePackage.loadClass(SingleSourcePackage.java:41)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass0(BundleLoader.java:496)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:416)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:168)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:153)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jface 2 0 2023-05-08 22:28:21.277
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-08 22:28:21.277
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-08 22:28:21.278
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-08 22:28:43.679
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Talavera'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.core 4 4 2023-05-08 22:28:44.673
!MESSAGE Exception while reading last build state for: P/UnitConversion
!STACK 1
org.eclipse.core.runtime.CoreException: Error reading last build state for project UnitConversion
	at org.eclipse.jdt.internal.core.JavaModelManager.readStateTimed(JavaModelManager.java:4120)
	at org.eclipse.jdt.internal.core.JavaModelManager.readState(JavaModelManager.java:4096)
	at org.eclipse.jdt.internal.core.JavaModelManager.getLastBuiltState(JavaModelManager.java:2264)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.getLastState(JavaBuilder.java:450)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:190)
	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:1024)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:254)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:311)
	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:400)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:403)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:514)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:462)
	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:544)
	at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:161)
	at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:255)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
Caused by: java.lang.NullPointerException: Cannot invoke "org.eclipse.jdt.internal.compiler.util.JrtFileSystem.walkModuleImage(org.eclipse.jdt.internal.compiler.util.JRTUtil$JrtFileVisitor, int)" because the return value of "org.eclipse.jdt.internal.compiler.util.JRTUtil.getJrtSystem(java.io.File, String)" is null
	at org.eclipse.jdt.internal.compiler.util.JRTUtil.walkModuleImage(JRTUtil.java:242)
	at org.eclipse.jdt.internal.core.builder.ClasspathJrt.lambda$1(ClasspathJrt.java:133)
	at java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1708)
	at org.eclipse.jdt.internal.core.builder.ClasspathJrt.loadModules(ClasspathJrt.java:129)
	at org.eclipse.jdt.internal.core.builder.ClasspathJrt.<init>(ClasspathJrt.java:67)
	at org.eclipse.jdt.internal.core.builder.ClasspathLocation.forJrtSystem(ClasspathLocation.java:170)
	at org.eclipse.jdt.internal.core.builder.State.readBinaryLocations(State.java:419)
	at org.eclipse.jdt.internal.core.builder.State.read(State.java:306)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.readState(JavaBuilder.java:161)
	at org.eclipse.jdt.internal.core.JavaModelManager.readStateTimed(JavaModelManager.java:4115)
	... 17 more
!SUBENTRY 1 org.eclipse.jdt.core 4 2 2023-05-08 22:28:44.674
!MESSAGE Error reading last build state for project UnitConversion
!STACK 0
java.lang.NullPointerException: Cannot invoke "org.eclipse.jdt.internal.compiler.util.JrtFileSystem.walkModuleImage(org.eclipse.jdt.internal.compiler.util.JRTUtil$JrtFileVisitor, int)" because the return value of "org.eclipse.jdt.internal.compiler.util.JRTUtil.getJrtSystem(java.io.File, String)" is null
	at org.eclipse.jdt.internal.compiler.util.JRTUtil.walkModuleImage(JRTUtil.java:242)
	at org.eclipse.jdt.internal.core.builder.ClasspathJrt.lambda$1(ClasspathJrt.java:133)
	at java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1708)
	at org.eclipse.jdt.internal.core.builder.ClasspathJrt.loadModules(ClasspathJrt.java:129)
	at org.eclipse.jdt.internal.core.builder.ClasspathJrt.<init>(ClasspathJrt.java:67)
	at org.eclipse.jdt.internal.core.builder.ClasspathLocation.forJrtSystem(ClasspathLocation.java:170)
	at org.eclipse.jdt.internal.core.builder.State.readBinaryLocations(State.java:419)
	at org.eclipse.jdt.internal.core.builder.State.read(State.java:306)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.readState(JavaBuilder.java:161)
	at org.eclipse.jdt.internal.core.JavaModelManager.readStateTimed(JavaModelManager.java:4115)
	at org.eclipse.jdt.internal.core.JavaModelManager.readState(JavaModelManager.java:4096)
	at org.eclipse.jdt.internal.core.JavaModelManager.getLastBuiltState(JavaModelManager.java:2264)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.getLastState(JavaBuilder.java:450)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:190)
	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:1024)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:254)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:311)
	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:400)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:403)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:514)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:462)
	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:544)
	at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:161)
	at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:255)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
