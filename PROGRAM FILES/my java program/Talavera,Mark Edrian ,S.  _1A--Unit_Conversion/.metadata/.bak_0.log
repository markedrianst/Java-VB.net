!SESSION 2023-02-26 10:45:57.043 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.5
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-02-26 10:46:00.321
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-02-26 10:47:24.789
!MESSAGE Logback config file: C:\Users\marke\Desktop\Talavera,Mark Edrian ,S.  _1A--Unit_Conversion\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-02-26 10:47:32.864
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-02-26 10:47:32.864
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-02-26 10:47:32.864
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-02-26 10:47:48.045
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\marke'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:10:29.580
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = inputValue*0.0625;(1°C × 9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-02-26 13:10:29.611
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-02-26 13:10:29.614
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:10:29.819
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = inputValue*0.0625;(1°C × 9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:10:29.823
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:10:29.826
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:10:30.686
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = inputValue*0.0625;(1°C × 9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:10:30.703
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:10:30.705
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:10:32.125
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = inputValue*0.0625;(1°C × 9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:10:32.128
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:10:32.130
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:10:33.481
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = inputValue*0.0625;(1°C × 9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:10:33.484
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:10:33.486
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:11:09.855
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = inputValue*0.0625;(1°C × 9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:11:09.859
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:11:09.861
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:11:10.736
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = inputValue*0.0625;(1°C × 9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:11:10.739
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:11:10.741
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:11:11.938
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = *0.0625;(1°C × 9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-02-26 13:11:11.942
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-02-26 13:11:11.944
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:11:12.225
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = *0.0625;(1°C × 9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:11:12.228
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:11:12.230
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:11:13.411
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = *0.0625;(1°C × 9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:11:13.414
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:11:13.415
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:11:14.633
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = *0.0625;(1°C × 9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:11:14.637
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:11:14.639
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:11:15.944
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = *0.0625;(inputValue°C × 9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-02-26 13:11:15.947
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-02-26 13:11:15.949
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:11:16.196
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = *0.0625;(inputValue°C × 9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:11:16.199
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:11:16.200
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:11:17.362
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = *0.0625;(inputValue°C × 9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:11:17.365
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:11:17.367
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:11:18.192
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = *0.0625;(inputValue°C × 9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:11:18.195
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:11:18.196
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:11:18.385
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = *0.0625;(inputValue°C × 9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:11:18.389
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:11:18.391
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:11:19.094
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = *0.0625;(inputValue° × 9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-02-26 13:11:19.106
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-02-26 13:11:19.109
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:11:19.231
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = *0.0625;(inputValue° × 9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:11:19.234
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:11:19.235
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:11:20.060
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = *0.0625;(inputValue × 9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-02-26 13:11:20.064
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-02-26 13:11:20.067
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:11:20.168
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = *0.0625;(inputValue × 9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:11:20.170
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:11:20.172
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:11:22.843
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = *0.0625;(inputValue × 9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:11:22.845
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:11:22.847
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:11:23.230
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = *0.0625;(inputValue × 9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:11:23.244
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:11:23.246
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:11:24.296
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = *0.0625;(inputValue  9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-02-26 13:11:24.298
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-02-26 13:11:24.304
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:11:24.369
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = *0.0625;(inputValue  9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-02-26 13:11:24.372
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-02-26 13:11:24.375
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:11:25.380
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = *0.0625;(inputValue 9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-02-26 13:11:25.382
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-02-26 13:11:25.385
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-02-26 13:11:25.498
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Unit_Conversion;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
public class frame_UnitConversion  extends JFrame implements ActionListener{



		
		Toolkit toolkit =this.getToolkit();
		Dimension size =toolkit.getScreenSize();
		JComboBox cb =new JComboBox();
		JLabel inputlbl =new JLabel("From :");
		JComboBox cb1 =new JComboBox();
		JComboBox cb2 =new JComboBox();
		JTextField input =new JTextField();
		JTextField output =new JTextField();
		JLabel select =new JLabel("Select Unit To Convert ");
		JLabel Unit =new JLabel("Select Unit Converter ");
		JLabel outputlbl =new JLabel("To :");
		JButton New= new JButton("new");
		JButton Convert= new JButton("Convert");
		
		frame_UnitConversion (){
			 
			 this.setSize(400,400);
			 this.setTitle("Measurements Converter");
			 this.setLocation(size.width/2-this.getWidth()/2,size.height/2-this.getHeight()/2);
			 this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			 this.setResizable(false);
			 
			 Unit.setBounds(80, 10, 300, 60);
			 Unit.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 select.setBounds(80, 90, 300, 60);
			 select.setFont(new Font("Times To New Roman", Font.BOLD, 20));
			 
			 
			 cb.setBounds(100, 60, 170, 30);
			 cb.setFocusable(false);
			 cb.addItem("Length");
			 cb.addItem("Temperature");
			 cb.addItem("Time");
			 cb.addItem("Weight");

			 
			 
			 inputlbl.setBounds(20, 150, 140, 30);
			 input.setBounds(20, 180, 140, 30);
			 
			 outputlbl.setBounds(210, 150, 140, 30);
			 output.setBounds(210, 180, 140, 30);
			 output.setEnabled(false);	
			 //output.setFont(new Font("Calibri", Font.BOLD, 20));
			 
			 cb1.setBounds(20, 220, 140, 30);
			 cb1.setFocusable(false);
			 
			 cb2.setBounds(210, 220, 140, 30);
			 cb2.setFocusable(false);
			 
			 New.setBounds(20, 280, 140, 30);
			 
			 Convert.setBounds(210, 280, 140, 30);
			 
			 this.add(New);
			 this.add(Convert);
			 this.add(Unit);
			 this.add(select);
			 this.add(output);
			 this.add(input);
			 this.add(inputlbl);
			 this.add(outputlbl);
			 this.add(cb);
			 this.add(cb1);
			 this.add(cb2);
			 this.setLayout(null);
			 this.setVisible(true);
			 cb.addActionListener(this);
			 New.addActionListener(this);
			 Convert.addActionListener(this);
		 }

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String selectedInput = (String) cb.getSelectedItem();
			 String inputUnit = (String) cb1.getSelectedItem();
	        String outputUnit = (String) cb2.getSelectedItem();

			 if (e.getSource()==cb) {
		
			 
			 cb1.removeAllItems();
			 cb2.removeAllItems();

			 if (selectedInput.equals("Length")) {
					cb1.addItem("Millimeter");
					cb1.addItem("Centimeter");
					cb1.addItem("Meter");
					cb1.addItem("Kilometer");
					cb1.addItem("Mile(s)");
					cb1.addItem("Yard");
					cb1.addItem("Foot");
					cb1.addItem("Inch(s)");
					
					
					cb2.addItem("Millimeter");
					cb2.addItem("Centimeter");
					cb2.addItem("Meter");
					cb2.addItem("Kilometer");
					cb2.addItem("Mile(s)");
					cb2.addItem("Yard");
					cb2.addItem("Foot");
					cb2.addItem("Inch(s)");
					
					
					System.out.println(cb1.getSelectedIndex());
					System.out.println(cb2.getSelectedIndex());
					
		        }
			 else if (selectedInput.equals("Weight")){
		        	
		        	cb1.addItem("Miligram(s)");
					cb1.addItem("Gram(s)");
					cb1.addItem("Kilogram(s)");
					cb1.addItem("Pound(s)");
					cb1.addItem("Ounce(s)");
					
					cb2.addItem("Miligram(s)");
					cb2.addItem("Gram(s)");
					cb2.addItem("Kilogram(s)");
					cb2.addItem("Pound(s)");
					cb2.addItem("Ounce(s)");
					
		        }
		        else if(selectedInput.equals("Temperature")) {
		        	cb1.addItem("Celsius");
					cb1.addItem("Fahrenheit");
					cb1.addItem("Kelvin");
					
					cb2.addItem("Celsius");
					cb2.addItem("Fahrenheit");
					cb2.addItem("Kelvin");
					
					
					
					
			       }
		        else if (selectedInput.equals("Time")) {
			    	   
			    	   cb1.addItem("Milisecond(s)");
						cb1.addItem("Second(s)");
						cb1.addItem("Minute(s)");
						cb1.addItem("Hour(s)");
						cb1.addItem("Day(s)");
						cb1.addItem("Week(s)");
						cb1.addItem("Month(s)");
						cb1.addItem("Year(s)");
						
						
						cb2.addItem("Milisecond(s)");
						cb2.addItem("Second(s)");
						cb2.addItem("Minute(s)");
						cb2.addItem("Hour(s)");
						cb2.addItem("Day(s)");
						cb2.addItem("Week(s)");
						cb2.addItem("Month(s)");
						cb2.addItem("Year(s)");
							
		        }
			    	   
			       }
			 	
			 
			 	if (e.getSource()==New){
			 		output.setText("");
			 		input.setText("");
			 		cb1.removeAllItems();
			 		cb2.removeAllItems();
			 		
			 	}
			 	 ///METER COMPUTATION
			 	
				if(e.getSource()==Convert){
			 		
			 	
					double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  
			            if (inputUnit.equals("Meter")) {
			            	
			                if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue * 100.0;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                else if (outputUnit.equals("Meter")) {
			                	 outputValue = inputValue;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 39.3700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 1000;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.001;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Yard")) {
			                	 outputValue = inputValue * 1.0936133;
			                	  output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 3.2808399;
			                	  output.setText(String.format("%.8f", outputValue));
			                }
			            }
				}
				 ///Centimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;

			    	   if (inputUnit.equals("Centimeter")) {
			    		   if (outputUnit.equals("Centimeter")) {
			                	
			                    outputValue = inputValue;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			            	
			                if (outputUnit.equals("Meter")) {
			                	
			                    outputValue = inputValue * 0.01;
			                    output.setText(String.format("%.8f", outputValue));
			                } 
			                
			                else if (outputUnit.equals("Inch(s)")) {
			                	
			                    outputValue = inputValue * 0.393700787;
			                    output.setText(String.format("%.8f", outputValue));
			                    
			                }
			                else if (outputUnit.equals("Millimeter")) {
			                	 outputValue = inputValue * 10;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Kilometer")) {
			                	 outputValue = inputValue * 0.00001;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                else if (outputUnit.equals("Mile(s)")) {
			                	 outputValue = inputValue * 0.0006214;
				                    output.setText(String.format("%.8"
				                    		+ "f", outputValue));
			                }
			                else if (outputUnit.equals("Yard)")) {
			                	 outputValue = inputValue * 1.0936133;
				                    output.setText(String.format("%.8f", outputValue));
				                    
			                } else if (outputUnit.equals("Foot")) {
			                	 outputValue = inputValue * 0.032808399;
				                    output.setText(String.format("%.8f", outputValue));
			                }
			                
			                
			                }
				 	}
				 ///Millimeter COMPUTATION
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Millimeter")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 10.0;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *0.001;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue * 0.000001;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s) ")) {
		                    outputValue = inputValue * 0.393700787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3.2808399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1.0936133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.0006214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //KILOMETER
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Kilometer")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue / 100000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1000;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter ")) {
		                    outputValue = inputValue * 1000000;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 39370.0787;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 3280.8399;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1093.6133;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                	outputValue = inputValue * 0.6214;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //MILE
				 if (e.getSource() == Convert){
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0;
				 
				 if (inputUnit.equals("Mile(s)")) {
		                if (outputUnit.equals("Centimeter")) {
		                    outputValue = inputValue * 160926.9391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Mile(s)")) {
		                    outputValue = inputValue ;
	                    	output.setText(String.format("%.8f", outputValue));
	                }
		                else if (outputUnit.equals("Meter")) {
		                    outputValue = inputValue *1609.269391696169939;
		                    	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Millimeter")) {
		                    outputValue = inputValue * 1609269.391696169939;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Inch(s)")) {
		                    outputValue = inputValue * 63360;
	                    	output.setText(String.format("%.8f", outputValue));

		                } 
		                else if (outputUnit.equals("Foot")) {
		                	 outputValue = inputValue * 5280;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
		                else if (outputUnit.equals("Yard")) {
		                	 outputValue = inputValue * 1760;
		                	output.setText(String.format("%.8f", outputValue));
		                }
		                else if (outputUnit.equals("Kilometer")) {
		                	outputValue = inputValue *1.60934;
		                	output.setText(String.format("%.8f", outputValue));
		                } 
				 
				 
				 }
				 }
				 //YARD
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Yard")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 91.44;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 36;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue * 914.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.000914;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000568;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.9144;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 3;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //FOOT
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Foot")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue *30.48;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Inch(s)")) {
				                	
				                    outputValue = inputValue * 12;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *304.8;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue * 0.0003048;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000189394;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.3048;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Yard")) {
				                	 outputValue = inputValue * 0.333333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //INCH
				 if(e.getSource()==Convert){
				 		
					 	
						double inputValue = Double.parseDouble(input.getText());
				         double outputValue = 0.0;
						  
				            if (inputUnit.equals("Inch(s)")) {
				            	
				                if (outputUnit.equals("Centimeter")) {
				                	
				                    outputValue = inputValue * 2.54;
				                    output.setText(String.format("%.8f", outputValue));
				                } 
				                else if (outputUnit.equals("Inch(s)")) {
				                	 outputValue = inputValue;
					                    output.setText(String.format("%.8f", outputValue));
				                }
				                
				                else if (outputUnit.equals("Yard")) {
				                	
				                    outputValue = inputValue * 0.027778;
				                    output.setText(String.format("%.8f", outputValue));
				                    
				                }
				                else if (outputUnit.equals("Millimeter")) {
				                	 outputValue = inputValue *25.4;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Kilometer")) {
				                	 outputValue = inputValue *0.000025;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Mile(s)")) {
				                	 outputValue = inputValue * 0.000016;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				                else if (outputUnit.equals("Meter")) {
				                	 outputValue = inputValue * 0.0254;
				                	  output.setText(String.format("%.8f", outputValue));
					                    
				                } else if (outputUnit.equals("Foot")) {
				                	 outputValue = inputValue * 0.0833333;
				                	  output.setText(String.format("%.8f", outputValue));
				                }
				            }
				 
				 }
				 //Miligram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Miligram(s)")) {	
			        	if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue * 0.001;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue * 0.000001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue * 0.000002;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue *0.000035;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Gram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Gram(s)")) {	
			        	if (outputUnit.equals("Gram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.001;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *0.002205;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue* 0.035274;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
					 
					 
					 
				 }
				 }
				 //Kilogram(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Kilogram(s)")) {	
			        	if (outputUnit.equals("Kilogram(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 1000000;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *1000;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue *2.204623;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*35.27396;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 //Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Pound(s)")) {	
			        	if (outputUnit.equals("Pound(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 453592.4;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *453.5924;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.453592;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Ounce(s)")) {
		                   outputValue = inputValue*16;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				//Pound(s)
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
			         if (inputUnit.equals("Ounce(s)")) {	
			        	if (outputUnit.equals("Ounce(s)")) {
			                   outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			        	else if (outputUnit.equals("Miligram(s)")) {
			                   outputValue = inputValue * 28349.52;
			                    output.setText(String.format("%.8f", outputValue));
			                
			        	 }
			         
			         else if (outputUnit.equals("Gram(s)")) {
		                   outputValue = inputValue *28.34952;
		                    output.setText(String.format("%.8f", outputValue));
		                
		        	 }
			         else if (outputUnit.equals("Kilogram(s)")) {
		                   outputValue = inputValue *0.02835;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			         else if (outputUnit.equals("Pound(s)")) {
		                   outputValue = inputValue*0.0625;
		                    output.setText(String.format("%.8f", outputValue));
		                
			         }
			        	}
			         }
				 if (e.getSource()==Convert) {
					 double inputValue = Double.parseDouble(input.getText());
			         double outputValue = 0.0;
					  if (inputUnit.equals("Celsius")) {
						  if (outputUnit.equals("Celsius")) {
							  outputValue = inputValue ;
			                    output.setText(String.format("%.8f", outputValue));
						  
						  }
						  else if (outputUnit.equals("Fahrenheit")) {
			                   outputValue = *0.0625;(inputValue 9/5) + 32 = 33.8°F

			                    output.setText(String.format("%.8f", outputValue));
			                
				         }
			                  
						  else if (outputUnit.equals("Kelvin")) {
			                   outputValue = inputValue*0.0625;
			                    output.setText(String.format("%.8f", outputValue));						  
					  }
				        	
				                
					 
					 
					 
					 
					 
					 
					 
					  }	 
					 
				 }
				 
				 }
		}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
